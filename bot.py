import pytz
import tzlocal
# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º tzlocal.get_localzone, —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞–ª—Å—è pytz-–æ–±—ä–µ–∫—Ç
tzlocal.get_localzone = lambda: pytz.timezone("Europe/Kiev")

def patched_astimezone(tz):
    if tz is None:
        return None
    if not isinstance(tz, pytz.BaseTzInfo):
        try:
            if isinstance(tz, str):
                return pytz.timezone(tz)
            if hasattr(tz, 'key'):
                return pytz.timezone(tz.key)
            return pytz.timezone(str(tz))
        except Exception as e:
            raise TypeError('Only timezones from the pytz library are supported') from e
    return tz

import apscheduler.util
apscheduler.util.astimezone = patched_astimezone

import logging
import sys
import json
import os
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)

print("–ë–æ—Ç –ø—Ä–∞—Ü—é—î...")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# TOKEN = "7747992449:AAEqWIUYRlhbdiwUnXqCYV3ODpNX9VUsed8"
# CHAT_ID = "2045410830"  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


TOKEN = "7526376768:AAEX-zUQxObbLD5osWAF2Q0ieWP9yvoKBu4"
CHAT_ID = "5920866016"  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
def get_next_order_number(user_id):
    filename = "global_order_number.json"
    if os.path.exists(filename):
        try:
            with open(filename, "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception:
            data = {"global_order": 0}
    else:
        data = {"global_order": 0}
    data["global_order"] += 1
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f)
    return data["global_order"]

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{now}] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.full_name} (ID: {user.id}) –≤–∏–∫–ª–∏–∫–∞–≤ /start")

    greeting_text = (
        "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Septic24!\n\n"
        "–ú–∏ –Ω–∞–¥–∞—î–º–æ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –∑ –≤–∏–∫–∞—á—É–≤–∞–Ω–Ω—è –≤–∏–≥—Ä—ñ–±–Ω–∏—Ö —è–º, —Å–µ–ø—Ç–∏–∫—ñ–≤, –∫–∞–Ω–∞–ª—ñ–∑–∞—Ü—ñ–π "
        "—Ç–∞ –≤—É–ª–∏—á–Ω–∏—Ö —Ç—É–∞–ª–µ—Ç—ñ–≤ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ.\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º—ñ–Ω—ñ‚Äë–¥–æ–¥–∞—Ç–æ–∫ —ñ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
    )
    
    # URL –≤–µ–±‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ GitHub Pages, —Å –ø–µ—Ä–µ–¥–∞—á–µ–π user_id
    web_app_url = "https://applabua.github.io/Septic24service/?user_id=" + str(user.id)
    keyboard = [[InlineKeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É‚ôªÔ∏è", web_app=WebAppInfo(url=web_app_url))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    photo_url = "https://i.ibb.co/BH3bjrPP/IMG-9356.jpg"
    if update.message:
        await update.message.reply_photo(photo=photo_url, caption=greeting_text, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /orders ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ orders.txt (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
async def orders_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != int(CHAT_ID):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return
    try:
        with open("orders.txt", "r", encoding="utf-8") as f:
            content = f.read()
        if not content.strip():
            content = "–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è."
    except FileNotFoundError:
        content = "–§–∞–π–ª –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(content)

# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /users ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö UserID –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
async def users_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != int(CHAT_ID):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    try:
        with open("orders.txt", "r", encoding="utf-8") as f:
            content = f.read()
        user_ids = set()
        for line in content.splitlines():
            if line.startswith("UserID:"):
                uid = line.split("UserID:")[1].strip()
                if uid:
                    user_ids.add(uid)
        if user_ids:
            msg = "–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n" + "\n".join(user_ids)
        else:
            msg = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ."
    except FileNotFoundError:
        msg = "–§–∞–π–ª –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(msg)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Telegram.WebApp.sendData
async def webapp_data_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.web_app_data:
        data_str = update.web_app_data.data
        try:
            order = json.loads(data_str)
        except Exception:
            order = {}

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ —Å—Ö–µ–º–µ 1-5
        order_number = get_next_order_number(order.get('user_id', 'unknown'))
        displayed_order = order_number % 5
        if displayed_order == 0:
            displayed_order = 5

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–∫–ª—é—á–∞—è –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        finalMsg = f"–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {displayed_order}/5\n–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Septic24:\n"
        finalMsg += f"–Ü–º'—è: {order.get('name','')}\n"
        finalMsg += f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.get('phone','')}\n"
        finalMsg += f"–û–±–ª–∞—Å—Ç—å: {order.get('region','')}\n"
        finalMsg += f"–ê–¥—Ä–µ—Å–∞: {order.get('address','')}\n"
    
        serviceIndex = order.get('serviceIndex')
        if serviceIndex is not None:
            servicesTitles = [
                "–í–∏–∫–∞—á–∫–∞ –≤–∏–≥—Ä—ñ–±–Ω–∏—Ö —è–º",
                "–í–∏–∫–∞—á–∫–∞ –º—É–ª—É —á–∏ –ø—ñ—Å–∫—É",
                "–í–∏–∫–∞—á–∫–∞ —Å–µ–ø—Ç–∏–∫–∞",
                "–ü—Ä–æ—á–∏—Å—Ç–∫–∞ —Ç—Ä—É–±",
                "–í–∏–∫–∞—á–∫–∞ —Ç—É–∞–ª–µ—Ç—É"
            ]
            if 0 <= serviceIndex < len(servicesTitles):
                finalMsg += f"–ü–æ—Å–ª—É–≥–∞: {servicesTitles[serviceIndex]}\n"
            if serviceIndex == 3:
                finalMsg += f"–î–æ–≤–∂–∏–Ω–∞ —Ç—Ä—É–±: {order.get('length','?')} –º\n"
                finalMsg += f"–î—ñ–∞–º–µ—Ç—Ä —Ç—Ä—É–±: {order.get('diameter','?')} –º–º\n"
            else:
                finalMsg += f"–û–±'—î–º —î–º–Ω–æ—Å—Ç—ñ: {order.get('volume','?')} –º¬≥\n"
                finalMsg += f"–í—ñ–¥—Å—Ç–∞–Ω—å –≤—ñ–¥ –ø–∞—Ä–∫–æ–≤–∫–∏ –¥–æ —î–º–Ω–æ—Å—Ç—ñ: {order.get('distance','?')} –º\n"
        
        coords = order.get('coords')
        if coords and 'x' in coords and 'y' in coords:
            lat = coords['y']
            lon = coords['x']
            finalMsg += f"–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {lat:.5f}, {lon:.5f}\n"
            finalMsg += f"OpenStreetMap: https://www.openstreetmap.org/?mlat={lat}&mlon={lon}\n"

        if order.get('user_id'):
            finalMsg += f"UserID: {order.get('user_id')}\n"

        now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open("orders.txt", "a", encoding="utf-8") as f:
            f.write(f"[{now_str}]\n{finalMsg}\n\n")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º—ñ–Ω—É
        await context.bot.send_message(chat_id=CHAT_ID, text=finalMsg)

        # –î—É–±–ª–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Ç–∞–∫–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if str(order.get('user_id')).isdigit():
                await context.bot.send_message(chat_id=int(order.get('user_id')), text=finalMsg)
        except Exception:
            pass

        # –í—ã—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if displayed_order == 5:
            bonus_text = ("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è 5/5 –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. "
                          "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫. üìû\n\nüéâ –ó–∞ –∫–æ–∂–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ 2% –∑–Ω–∏–∂–∫—É, "
                          "–∞ –∫–æ–∂–Ω–µ 5‚Äë—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äì 10% –∑–Ω–∏–∂–∫—É!")
        else:
            bonus_text = (f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {displayed_order}/5 –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. "
                          "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫. üìû\n\nüíß –ó–∞ –∫–æ–∂–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ 2% –∑–Ω–∏–∂–∫—É, "
                          "–∞ –∫–æ–∂–Ω–µ 5‚Äë—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äì 10% –∑–Ω–∏–∂–∫—É!")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞–¥–º—ñ–Ω—É, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(chat_id=CHAT_ID, text=bonus_text)
        try:
            if str(order.get('user_id')).isdigit():
                await context.bot.send_message(chat_id=int(order.get('user_id')), text=bonus_text)
        except Exception:
            pass

        if update.effective_message:
            await update.effective_message.reply_text("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫.")

        print("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", finalMsg)

def main() -> None:
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("orders", orders_history))
    application.add_handler(CommandHandler("users", users_list))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webapp_data_handler))
    application.run_polling()

if __name__ == "__main__":
    main()
